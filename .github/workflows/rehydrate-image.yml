name: Rehydrate Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-aws:
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS credentials
      run: |
        mkdir -p ~/.aws
        echo "[experiment]" > ~/.aws/credentials
        echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
        echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
        echo "[profile experiment]" > ~/.aws/config
        echo "region = ${{ vars.AWS_DEFAULT_REGION }}" >> ~/.aws/config

  rehydrate:
    runs-on: ubuntu-latest
    needs: setup-aws

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Copy SSH keys
      run: |
        mkdir -p ~/.ssh
        cp terraform-microservice/las_llaves ~/.ssh/id_rsa
        cp terraform-microservice/las_llaves.pub ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub

    - name: Generate unique AMI name
      id: ami_name
      run: echo "AMI_NAME=my-ami-$(date +%s)" >> $GITHUB_ENV

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Delete previous AMI
      run: |
        AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=my-ami-*" --region ${{ vars.AWS_DEFAULT_REGION }} --query "Images[0].ImageId" --output text)
        if [ "$AMI_ID" != "None" ]; then
          SNAPSHOT_ID=$(aws ec2 describe-images --image-ids $AMI_ID --region ${{ vars.AWS_DEFAULT_REGION }} --query "Images[0].BlockDeviceMappings[0].Ebs.SnapshotId" --output text)
          aws ec2 deregister-image --image-id $AMI_ID --region ${{ vars.AWS_DEFAULT_REGION }}
          aws ec2 delete-snapshot --snapshot-id $SNAPSHOT_ID --region ${{ vars.AWS_DEFAULT_REGION }}
        else
          echo "No previous AMI found. OK to go."
        fi

    - name: Initialize Terraform
      run: terraform init
      working-directory: terraform-microservice

    - name: Validate Terraform
      run: terraform validate
      working-directory: terraform-microservice

    - name: Plan Terraform
      run: terraform plan -var="ami_name=${{ env.AMI_NAME }}" -out=tfplan
      working-directory: terraform-microservice

    - name: Apply Terraform
      if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve tfplan
      working-directory: terraform-microservice

    - name: Echo done message
      run: echo "done"